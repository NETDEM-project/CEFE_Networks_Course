par(mfrow=c(1,2))
plot(mean_degree,type="l")
plot(var_degree,type="l")
par(mfrow=c(1,1))
plot(networks[[1]])
plot(networks[[101]])
net_assort<-function(net){assortativity(net,types1=degree(net),directed=FALSE)}
plot(sapply(networks,net_assort),type="l")
##Population size over time
plot(sapply(inds,nrow),type="l")
##Full test
#individual level dataframe
ind_data<-data.frame(id=seq(1,n,1),soc_trait=soc_trait,parent=rep(NA,n))
#List to monitor population at different time steps
inds<-list()
inds[[1]]<-ind_data
#A convenience function used each time step
indMax<-function(a){apply(a,2,max)[1]}
nmax<-max(sapply(inds,indMax))
##We can now use the code above to right out a function for what happens at each time step
timestep<-function(ind_data,surv_int,surv_eff,surv_res,rep_int,rep_eff,inh_sd,nmax){
n<-nrow(ind_data)
soc_trait<-ind_data$soc_trait
network<-gen_net2(n=n,soc_trait=soc_trait)
network2<-graph.adjacency(network,mode="undirected",weighted=TRUE,diag=FALSE)
#Calculate a centrality measure
#centrality<-igraph::degree(network2)
centrality<-igraph::transitivity(network2,type="weighted")
#centrality<-igraph::closeness(network2,weights=1/E(network2)$weight,normalized=TRUE)
#The line below is for when the "centrality" measure is clustering coefficient/transitivity
centrality[is.na(centrality)]<-0
#Scale the centrality measure
centrality_sc<-scale(centrality)
#Calculate survival probabilities of individuals
surv<-boot::inv.logit(rnorm(100,logit(surv_int)+surv_eff*centrality_sc,surv_res))
#Calculate if individuals survive
survive<-rbinom(n,1,prob=surv)
#reproduce
offspring<-rpois(n,lambda=rep_int+rep_eff*centrality_sc)
offspring2<-survive*offspring
#offspring traits
n2<-sum(offspring2)
if(n2>0){
new<-seq(1,n2,1)
parent<-rep(NA,n2)
ch<-0
for(i in 1:length(offspring2)){
if(offspring2[i]>0){
parent[(ch+1):(ch+offspring2[i])]<-i
ch<-ch+offspring2[i]
}
}
#assign soc_trait to offspring
n_soc_trait<-rnorm(n2,soc_trait[parent],inh_sd)
new_ind_data<-data.frame(new+nmax,n_soc_trait,parent)
names(new_ind_data)<-names(ind_data)
ind_data_2<-rbind(ind_data[survive==1,],new_ind_data)
}
if(n2==0){
ind_data_2<-ind_data[survive==1,]
}
output<-list(network,network2,ind_data_2)
return(output)
}
#######################
#######################
##Run test of population eco-evolutionary dynamics over time
ind_data<-data.frame(id=seq(1,n,1),soc_trait=soc_trait,parent=rep(NA,n))
inds<-list()
inds[[1]]<-ind_data
networks<-list()
networks[[1]]<-network2
for(times in 1:100){
output<-timestep(ind_data=inds[[times]],surv_int=surv_int,surv_eff=surv_eff,surv_res=surv_res,rep_int=rep_int,rep_eff=rep_eff,inh_sd=inh_sd,nmax=max(sapply(inds,indMax)))
inds[[times+1]]<-output[[3]]
networks[[times+1]]<-output[[2]]
}
##Check some outputs
inds[[21]]
##Mean social trait over time
socMean<-function(a){apply(a,2,mean)[2]}
time_mean<-sapply(inds,socMean)
plot(time_mean,type="l")
##Variation in social trait over time
socVar<-function(a){apply(a,2,sd)[2]}
time_var<-sapply(inds,socVar)
plot(time_var,type="l")
##Degree over time
degree<-sapply(networks,igraph::degree)
mean_degree<-sapply(degree,mean)
var_degree<-sapply(degree,sd)
par(mfrow=c(1,2))
plot(mean_degree,type="l")
plot(var_degree,type="l")
par(mfrow=c(1,1))
plot(networks[[1]])
plot(networks[[101]])
net_assort<-function(net){assortativity(net,types1=degree(net),directed=FALSE)}
plot(sapply(networks,net_assort),type="l")
##Population size over time
plot(sapply(inds,nrow),type="l")
##Full test
#individual level dataframe
ind_data<-data.frame(id=seq(1,n,1),soc_trait=soc_trait,parent=rep(NA,n))
#List to monitor population at different time steps
inds<-list()
inds[[1]]<-ind_data
#A convenience function used each time step
indMax<-function(a){apply(a,2,max)[1]}
nmax<-max(sapply(inds,indMax))
##We can now use the code above to right out a function for what happens at each time step
timestep<-function(ind_data,surv_int,surv_eff,surv_res,rep_int,rep_eff,inh_sd,nmax){
n<-nrow(ind_data)
soc_trait<-ind_data$soc_trait
network<-gen_net2(n=n,soc_trait=soc_trait)
network2<-graph.adjacency(network,mode="undirected",weighted=TRUE,diag=FALSE)
#Calculate a centrality measure
#centrality<-igraph::degree(network2)
centrality<-igraph::transitivity(network2,type="weighted")
#centrality<-igraph::closeness(network2,weights=1/E(network2)$weight,normalized=TRUE)
#The line below is for when the "centrality" measure is clustering coefficient/transitivity
centrality[is.na(centrality)]<-0
#Scale the centrality measure
centrality_sc<-scale(centrality)
#Calculate survival probabilities of individuals
surv<-boot::inv.logit(rnorm(100,logit(surv_int)+surv_eff*centrality_sc,surv_res))
#Calculate if individuals survive
survive<-rbinom(n,1,prob=surv)
#reproduce
offspring<-rpois(n,lambda=rep_int+rep_eff*centrality_sc)
offspring2<-survive*offspring
#offspring traits
n2<-sum(offspring2)
if(n2>0){
new<-seq(1,n2,1)
parent<-rep(NA,n2)
ch<-0
for(i in 1:length(offspring2)){
if(offspring2[i]>0){
parent[(ch+1):(ch+offspring2[i])]<-i
ch<-ch+offspring2[i]
}
}
#assign soc_trait to offspring
n_soc_trait<-rnorm(n2,soc_trait[parent],inh_sd)
new_ind_data<-data.frame(new+nmax,n_soc_trait,parent)
names(new_ind_data)<-names(ind_data)
ind_data_2<-rbind(ind_data[survive==1,],new_ind_data)
}
if(n2==0){
ind_data_2<-ind_data[survive==1,]
}
output<-list(network,network2,ind_data_2)
return(output)
}
#######################
#######################
##Run test of population eco-evolutionary dynamics over time
ind_data<-data.frame(id=seq(1,n,1),soc_trait=soc_trait,parent=rep(NA,n))
inds<-list()
inds[[1]]<-ind_data
networks<-list()
networks[[1]]<-network2
for(times in 1:100){
output<-timestep(ind_data=inds[[times]],surv_int=surv_int,surv_eff=surv_eff,surv_res=surv_res,rep_int=rep_int,rep_eff=rep_eff,inh_sd=inh_sd,nmax=max(sapply(inds,indMax)))
inds[[times+1]]<-output[[3]]
networks[[times+1]]<-output[[2]]
}
##Check some outputs
inds[[21]]
##Mean social trait over time
socMean<-function(a){apply(a,2,mean)[2]}
time_mean<-sapply(inds,socMean)
plot(time_mean,type="l")
##Variation in social trait over time
socVar<-function(a){apply(a,2,sd)[2]}
time_var<-sapply(inds,socVar)
plot(time_var,type="l")
##Degree over time
degree<-sapply(networks,igraph::degree)
mean_degree<-sapply(degree,mean)
var_degree<-sapply(degree,sd)
par(mfrow=c(1,2))
plot(mean_degree,type="l")
plot(var_degree,type="l")
par(mfrow=c(1,1))
plot(networks[[1]])
plot(networks[[101]])
net_assort<-function(net){assortativity(net,types1=degree(net),directed=FALSE)}
plot(sapply(networks,net_assort),type="l")
##Population size over time
plot(sapply(inds,nrow),type="l")
##Run test of population eco-evolutionary dynamics over time
ind_data<-data.frame(id=seq(1,n,1),soc_trait=soc_trait,parent=rep(NA,n))
inds<-list()
inds[[1]]<-ind_data
networks<-list()
networks[[1]]<-network2
for(times in 1:200){
output<-timestep(ind_data=inds[[times]],surv_int=surv_int,surv_eff=surv_eff,surv_res=surv_res,rep_int=rep_int,rep_eff=rep_eff,inh_sd=inh_sd,nmax=max(sapply(inds,indMax)))
inds[[times+1]]<-output[[3]]
networks[[times+1]]<-output[[2]]
}
##Check some outputs
inds[[21]]
##Mean social trait over time
socMean<-function(a){apply(a,2,mean)[2]}
time_mean<-sapply(inds,socMean)
plot(time_mean,type="l")
##Variation in social trait over time
socVar<-function(a){apply(a,2,sd)[2]}
time_var<-sapply(inds,socVar)
plot(time_var,type="l")
##Degree over time
degree<-sapply(networks,igraph::degree)
mean_degree<-sapply(degree,mean)
var_degree<-sapply(degree,sd)
par(mfrow=c(1,2))
plot(mean_degree,type="l")
plot(var_degree,type="l")
par(mfrow=c(1,1))
plot(networks[[1]])
plot(networks[[101]])
net_assort<-function(net){assortativity(net,types1=degree(net),directed=FALSE)}
plot(sapply(networks,net_assort),type="l")
##Population size over time
plot(sapply(inds,nrow),type="l")
par(mfrow=c(1,2))
plot(mean_degree/sapply(inds,nrow),type="l")
plot(var_degree,type="l")
par(mfrow=c(1,1))
##Degree over time
degree<-sapply(networks,igraph::degree)
mean_degree<-sapply(degree,mean)
var_degree<-sapply(degree,sd)
par(mfrow=c(1,2))
plot(mean_degree/(sapply(inds,nrow)-1),type="l")
plot(var_degree,type="l")
par(mfrow=c(1,1))
##Run test of population eco-evolutionary dynamics over time
ind_data<-data.frame(id=seq(1,n,1),soc_trait=soc_trait,parent=rep(NA,n))
inds<-list()
inds[[1]]<-ind_data
networks<-list()
networks[[1]]<-network2
for(times in 1:200){
output<-timestep(ind_data=inds[[times]],surv_int=surv_int,surv_eff=surv_eff,surv_res=surv_res,rep_int=rep_int,rep_eff=rep_eff,inh_sd=inh_sd,nmax=max(sapply(inds,indMax)))
inds[[times+1]]<-output[[3]]
networks[[times+1]]<-output[[2]]
}
##Check some outputs
inds[[21]]
##Mean social trait over time
socMean<-function(a){apply(a,2,mean)[2]}
time_mean<-sapply(inds,socMean)
plot(time_mean,type="l")
##Variation in social trait over time
socVar<-function(a){apply(a,2,sd)[2]}
time_var<-sapply(inds,socVar)
plot(time_var,type="l")
##Degree over time
degree<-sapply(networks,igraph::degree)
mean_degree<-sapply(degree,mean)
var_degree<-sapply(degree,sd)
par(mfrow=c(1,2))
plot(mean_degree/(sapply(inds,nrow)-1),type="l")
plot(var_degree,type="l")
par(mfrow=c(1,1))
plot(networks[[1]])
plot(networks[[101]])
net_assort<-function(net){assortativity(net,types1=degree(net),directed=FALSE)}
plot(sapply(networks,net_assort),type="l")
##Population size over time
plot(sapply(inds,nrow),type="l")
##Run test of population eco-evolutionary dynamics over time
ind_data<-data.frame(id=seq(1,n,1),soc_trait=soc_trait,parent=rep(NA,n))
inds<-list()
inds[[1]]<-ind_data
networks<-list()
networks[[1]]<-network2
for(times in 1:200){
output<-timestep(ind_data=inds[[times]],surv_int=surv_int,surv_eff=surv_eff,surv_res=surv_res,rep_int=rep_int,rep_eff=rep_eff,inh_sd=inh_sd,nmax=max(sapply(inds,indMax)))
inds[[times+1]]<-output[[3]]
networks[[times+1]]<-output[[2]]
}
##Check some outputs
inds[[21]]
##Mean social trait over time
socMean<-function(a){apply(a,2,mean)[2]}
time_mean<-sapply(inds,socMean)
plot(time_mean,type="l")
##Variation in social trait over time
socVar<-function(a){apply(a,2,sd)[2]}
time_var<-sapply(inds,socVar)
plot(time_var,type="l")
##Degree over time
degree<-sapply(networks,igraph::degree)
mean_degree<-sapply(degree,mean)
var_degree<-sapply(degree,sd)
par(mfrow=c(1,2))
plot(mean_degree/(sapply(inds,nrow)-1),type="l")
plot(var_degree,type="l")
par(mfrow=c(1,1))
plot(networks[[1]])
plot(networks[[101]])
net_assort<-function(net){assortativity(net,types1=degree(net),directed=FALSE)}
plot(sapply(networks,net_assort),type="l")
##Population size over time
plot(sapply(inds,nrow),type="l")
?transitivity
clu_weighted<-function(net){transitivity(net,type="barrat")}
sapply(networks,clu_weighted)
sapply(sapply(networks,clu_weighted),mean,na.rm=TRUE)
##Plot clustering coefficient over time
plot(sapply(sapply(networks,clu_weighted),mean,na.rm=TRUE),type="l")
##Plot clustering coefficient over time
clustering<-sapply(networks,clu_weighted)
plot(clustering[[1]]~degree[[1]])
plot(clustering[[1]]~inds[[1]]$soc_trait)
plot(clustering[[50]]~inds[[50]]$soc_trait)
plot(clustering[[10]]~inds[[10]]$soc_trait)
plot(clustering[[20]]~inds[[20]]$soc_trait)
clustering[[20]]
length(clustering[[20]])
length(inds[[20]])
nrow(inds[[20]])
nrow(inds[[21]])
nrow(inds[[19]])
clustering[[1]]
par(mfrow=c(2,2))
plot(clustering[[2]]~inds[[1]]$soc_trait)
plot(clustering[[10]]~inds[[9]]$soc_trait)
plot(clustering[[20]]~inds[[19]]$soc_trait)
plot(clustering[[30]]~inds[[29]]$soc_trait)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(clustering[[2]]~inds[[1]]$soc_trait,ylim=c(0,1))
plot(clustering[[10]]~inds[[9]]$soc_trait,ylim=c(0,1))
plot(clustering[[20]]~inds[[19]]$soc_trait,ylim=c(0,1))
plot(clustering[[30]]~inds[[29]]$soc_trait,ylim=c(0,1))
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(clustering[[2]]~inds[[1]]$soc_trait,ylim=c(0,1))
plot(clustering[[15]]~inds[[4]]$soc_trait,ylim=c(0,1))
plot(clustering[[30]]~inds[[29]]$soc_trait,ylim=c(0,1))
plot(clustering[[45]]~inds[[44]]$soc_trait,ylim=c(0,1))
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(clustering[[2]]~inds[[1]]$soc_trait,ylim=c(0,1))
plot(clustering[[15]]~inds[[14]]$soc_trait,ylim=c(0,1))
plot(clustering[[30]]~inds[[29]]$soc_trait,ylim=c(0,1))
plot(clustering[[45]]~inds[[44]]$soc_trait,ylim=c(0,1))
par(mfrow=c(1,1))
plot(time_mean,type="l")
plot(sapply(sapply(networks,clu_weighted),mean,na.rm=TRUE),type="l")
par(mfrow=c(2,2))
plot(clustering[[2]]~inds[[1]]$soc_trait,ylim=c(0,1))
plot(clustering[[15]]~inds[[14]]$soc_trait,ylim=c(0,1))
plot(clustering[[30]]~inds[[29]]$soc_trait,ylim=c(0,1))
plot(clustering[[45]]~inds[[44]]$soc_trait,ylim=c(0,1))
par(mfrow=c(1,1))
plot(clustering[[2]]~inds[[1]]$soc_trait)
par(mfrow=c(2,2))
plot(clustering[[2]]~inds[[1]]$soc_trait,ylim=c(0,1))
plot(clustering[[15]]~inds[[14]]$soc_trait,ylim=c(0,1))
plot(clustering[[30]]~inds[[29]]$soc_trait,ylim=c(0,1))
plot(clustering[[45]]~inds[[44]]$soc_trait,ylim=c(0,1))
par(mfrow=c(1,1))
plot(sapply(sapply(networks,clu_weighted),mean,na.rm=TRUE),type="l")
par(mfrow=c(2,2))
plot(clustering[[2]]~inds[[1]]$soc_trait,ylim=c(0,1))
plot(clustering[[15]]~inds[[14]]$soc_trait,ylim=c(0,1))
plot(clustering[[30]]~inds[[29]]$soc_trait,ylim=c(0,1))
plot(clustering[[45]]~inds[[44]]$soc_trait,ylim=c(0,1))
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(mean_degree/(sapply(inds,nrow)-1),type="l")
plot(var_degree,type="l")
par(mfrow=c(1,1))
plot(sapply(sapply(networks,clu_weighted),sd,na.rm=TRUE),type="l")
par(mfrow=c(1,2))
plot(mean_degree/(sapply(inds,nrow)-1),type="l")
plot(var_degree,type="l")
par(mfrow=c(1,1))
par(mfrow=c(1,2))
plot(sapply(apply(inds,2,mean,na.rm=TRUE)),type="l")
plot(sapply(apply(inds,2,mean,na.rm=TRUE)),mean,type="l")
apply(inds,2,mean,na.rm=TRUE)
colMeans(inds)
sappl(inds,colMeans)
sapply(inds,colMeans)
sum_func<-function(a,func){apply(a,2,func)[2]}
plot(sapply(inds,sum_func,mean),type="l")
plot(sapply(inds,sum_func,sd),type="l")
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
library(igraph)
library(asnipe)
library(asnipe)
library(viridis)
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
getwd()
setwd("C:/Users/matth/Dropbox/MSCA_Fellowship/CEFE_Networks_Course2/Session3")
setwd("C:/Users/matth/Dropbox/MSCA_Fellowship/CEFE_Networks_Course2/Session2")
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
#Read in associated trait data
ind_data<-readRDS("ind_data.RDS")
setwd("C:/Users/matth/Dropbox/MSCA_Fellowship/CEFE_Networks_Course/Session2")
ind_data<-readRDS("ind_data.RDS")
setwd("C:/Users/matth/Dropbox/MSCA_Fellowship/CEFE_Networks_Course2/Session1")
ind_data<-readRDS("ind_data.RDS")
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
#Read in associated trait data
ind_data<-readRDS("ind_data.RDS")
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
library(igraph)
library(asnipe)
library(viridis)
setwd("C:/Users/matth/Dropbox/MSCA_Fellowship/CEFE_Networks_Course2/Session2")
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
#Read in the network object
full_adj<-readRDS("full_adj.rds")
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
getwd()
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
dir()
readRDS("full_adj.RDS")
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
readRDS("full_adj.RDS")
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
readRDS("full_adj.RDS")
readRDS("full_adj.RDS")
readRDS("full_adj.RDS")
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
#Read in associated trait data
ind_data<-readRDS("ind_data.RDS")
length(upper.tri(full_adj))
length(full_adj
)
sum(upper.tri(full_adj)))
sum(upper.tri(full_adj))
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
#Read in associated trait data
ind_data<-readRDS("ind_data.RDS")
names(ind_data)[1]<-"id"
#Create a weighted version - we are adding edge weights from a beta distribution
full_adj_weight<-rbeta(sum(upper.tri(full_adj)),2,7)
full_adj[upper.tri(full_adj)]<-full_adj_weight*full_adj[upper.tri(full_adj)]
full_adj[lower.tri(full_adj)]<-t(full_adj)[lower.tri(full_adj)]
isSymmetric(full_adj)
library(assortnet)
full_adj
plot(network)
network<-igraph::graph_from_adjacency_matrix(full_adj_weight,mode="undirected",weighted=TRUE)
network<-igraph::graph_from_adjacency_matrix(full_adj,mode="undirected",weighted=TRUE)
V(network)$size<-5+ind_data$offspring
V(network)$sex<-ind_data$sex
V(network)$group<-ind_data$group
assortnet::assortment.discrete(full_adj)
plot(network)
?assortment.discrete\
?assortment.discrete
assortnet::assortment.discrete(graph=full_adj,types=ind_data$sex,weighted=TRUE,SE=FALSE)
obs_assort<-assortnet::assortment.discrete(graph=full_adj,types=ind_data$sex,weighted=TRUE,SE=FALSE)$r
obs_assort
perm_assort<-numeric()
for(i in 1:9999){
perm_assort[i]<-assortnet::assortment.discrete(graph=full_adj,types=sample(ind_data$sex,nrow(ind_data),replace=FALSE,weighted=TRUE,SE=FALSE)$r
}
assortnet::assortment.discrete(graph=full_adj,types=sample(ind_data$sex,nrow(ind_data),replace=FALSE,weighted=TRUE,SE=FALSE)$r
perm_assort<-numeric()
for(i in 1:9999){
perm_assort[i]<-assortnet::assortment.discrete(graph=full_adj,types=sample(ind_data$sex,nrow(ind_data)),replace=FALSE,weighted=TRUE,SE=FALSE)$r
}
?sample
perm_assort<-numeric()
for(i in 1:9999){
perm_assort[i]<-assortnet::assortment.discrete(graph=full_adj,types=sample(ind_data$sex,nrow(ind_data),replace=FALSE),weighted=TRUE,SE=FALSE)$r
}
#And add the observed value to the reference distribution for p value calculation
perm_assort2<-c(perm_assort,obs_assort)
hist(perm_assort)
#We can plot the outcome of our permutation test like this:
hist(perm_assort,main="",breaks=50)
hist(perm_assort,main="",breaks=50)
#We can plot the outcome of our permutation test like this:
hist(perm_assort,main="",breaks=50,las=1,xlab="Reference distribution of assortativity values")
#And add our observed assortativity to this plot
lines(x=rep(obs_assort,2),y=c(-1000,10000),col="red",lwd=3)
#We can plot the outcome of our permutation test like this:
hist(perm_assort,main="",breaks=50,las=1,xlab="Reference distribution of assortativity values")
#And add our observed assortativity to this plot
lines(x=rep(obs_assort,2),y=c(-1000,10000),col="red",lwd=3)
#We can then calculate what proportion of the reference distribution is greater than our observed assortativity (a proportion smaller than 0.025 or greater than 0.975 would indicate statistical significance for alpha=0.05)
sum(obs_assort<perm_assort2)/length(perm_assort2)
