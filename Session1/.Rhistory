par(tcl=0.2)
plot(x,y)
#R Code to reproduce figures 1, 3, 4 and 5 in Approaches to represent animal social networks: an overview
#Author: Matthew Silk
library(igraph)
library(viridis)
set.seed(25)
indivs<-seq(1,10,1)
n_indivs<-length(indivs)
clusters<-sample(c("A","B"),n_indivs,replace=TRUE)
inters<-matrix(NA,nr=40,nc=3)
for(i in 1:nrow(inters)){
inters[i,1]<-sample(indivs,1)
probs<-rep(0.1,n_indivs)
probs[clusters%in%clusters[inters[i,1]]]<-probs[clusters%in%clusters[inters[i,1]]]+0.9
probs[inters[i,1]]<-0
inters[i,2]<-sample(indivs,1,prob=probs)
inters[i,3]<-1+rpois(1,1)
}
network1<-graph_from_edgelist(inters[,1:2], directed = FALSE)
network2<-graph_from_edgelist(inters[,1:2], directed = FALSE)
E(network2)$weight<-inters[,3]
network3<-simplify(network2, edge.attr.comb=list(weight="sum"))
lo_mat<-matrix(c(1,1,2,2,1,1,2,2,3,3,3,3,3,3,3,3),nr=4,nc=4,byrow=TRUE)
set.seed(4)
lo<-layout.auto(network2)
par(mar=c(0,0,0,0))
layout(lo_mat)
plot(network3,layout=lo,vertex.label=NA,edge.width=E(network3)$weight,vertex.color="gray20",edge.color="gray40")
mtext(side=3,adj=0.05,"a)",cex=1.5,line=-3)
plot(network1,layout=lo,vertex.label=NA,vertex.color="gray20",edge.color="gray40")
mtext(side=3,adj=0.05,"b)",cex=1.5,line=-3)
plot(network2,layout=lo,vertex.label=NA,edge.width=E(network2)$weight,vertex.color="gray20",edge.color="gray40")
mtext(side=3,adj=0.05,"c)",cex=1.5,line=-3)
#R Code to reproduce figures 1, 3, 4 and 5 in Approaches to represent animal social networks: an overview
#Author: Matthew Silk
library(igraph)
library(viridis)
set.seed(25)
indivs<-seq(1,10,1)
n_indivs<-length(indivs)
clusters<-sample(c("A","B"),n_indivs,replace=TRUE)
inters<-matrix(NA,nr=40,nc=3)
for(i in 1:nrow(inters)){
inters[i,1]<-sample(indivs,1)
probs<-rep(0.1,n_indivs)
probs[clusters%in%clusters[inters[i,1]]]<-probs[clusters%in%clusters[inters[i,1]]]+0.9
probs[inters[i,1]]<-0
inters[i,2]<-sample(indivs,1,prob=probs)
inters[i,3]<-1+rpois(1,1)
}
network1<-graph_from_edgelist(inters[,1:2], directed = FALSE)
network2<-graph_from_edgelist(inters[,1:2], directed = FALSE)
E(network2)$weight<-inters[,3]
network3<-simplify(network2, edge.attr.comb=list(weight="sum"))
lo_mat<-matrix(c(1,1,2,2,1,1,2,2,3,3,3,3,3,3,3,3),nr=4,nc=4,byrow=TRUE)
set.seed(4)
lo<-layout.auto(network2)
par(mar=c(0,0,0,0))
layout(lo_mat)
plot(network3,layout=lo,vertex.label=NA,edge.width=E(network3)$weight,vertex.color="gray20",edge.color="gray40")
mtext(side=3,adj=0.05,"(a)",cex=1.5,line=-3)
plot(network1,layout=lo,vertex.label=NA,vertex.color="gray20",edge.color="gray40")
mtext(side=3,adj=0.05,"(b)",cex=1.5,line=-3)
plot(network2,layout=lo,vertex.label=NA,edge.width=E(network2)$weight,vertex.color="gray20",edge.color="gray40")
mtext(side=3,adj=0.05,"(c)",cex=1.5,line=-3)
library(HyperG)
library(asnipe)
set.seed(18)
indivs<-seq(1,10,1)
n_indivs<-length(indivs)
inters<-matrix(NA,nr=8,nc=n_indivs)
inters[1,]<-c(1,1,0,0,0,0,0,0,0,0)
inters[2,]<-c(0,0,1,1,1,0,0,0,0,0)
inters[3,]<-c(0,0,0,0,0,1,1,1,1,1)
inters[4,]<-c(1,0,1,0,0,0,0,0,0,0)
inters[5,]<-c(0,1,0,1,0,0,0,0,0,0)
inters[6,]<-c(0,0,0,0,1,1,0,0,0,0)
inters[7,]<-c(0,0,0,0,0,0,1,1,0,0)
inters[8,]<-c(0,0,0,0,0,0,0,0,1,1)
bi_net<-graph_from_incidence_matrix(t(inters),directed=FALSE)
bi_net<-graph_from_incidence_matrix(t(inters),directed=FALSE)
par(mar=c(1,1,1,1),mfrow=c(1,3))
plot(bi_net,layout=layout.bipartite(bi_net),vertex.color=ifelse(V(bi_net)$type==TRUE,"gray80","gray20"),vertex.shape=ifelse(V(bi_net)$type==TRUE,"square","circle"),edge.color="gray40",vertex.label=NA)
mtext("a)",side=3,line=-5,adj=0.05,cex=1.5)
###
hy_net<-hypergraph_from_incidence_matrix(inters)
set.seed(1)
plot(hy_net,vertex.label=NA,vertex.color="gray20",mark.col=adjustcolor("gray40",0.1),mark.border="gray40")
mtext("b)",side=3,line=-5,adj=0.05,cex=1.5)
net_mat<-matrix(0,nr=n_indivs,nc=n_indivs)
for(i in 1:(ncol(net_mat)-1)){
for(j in (i+1):ncol(net_mat)){
net_mat[i,j]<-net_mat[j,i]<-sum(inters[inters[,i]>0,j])
}
}
so_net<-graph_from_adjacency_matrix(net_mat,mode="undirected",weighted=TRUE)
set.seed(9)
plot(so_net,edge.width=E(so_net)$weight^3,vertex.label=NA,vertex.color="gray20",edge.color="gray40")
mtext("c)",side=3,line=-5,adj=0.05,cex=1.5)
set.seed(3)
library(timeordered)
indivs<-seq(1,10,1)
n_indivs<-length(indivs)
clusters<-sample(c("A","B"),n_indivs,replace=TRUE)
inters<-matrix(NA,nr=40,nc=4)
first<-5
for(i in 1:nrow(inters)){
inters[i,1]<-sample(indivs,1)
probs<-rep(0.1,n_indivs)
probs[clusters%in%clusters[inters[i,1]]]<-probs[clusters%in%clusters[inters[i,1]]]+0.9
probs[inters[i,1]]<-0
inters[i,2]<-sample(indivs,1,prob=probs)
if(i==1){inters[i,3]<-first}
if(i>1){inters[i,3]<-inters[(i-1),3]+rpois(1,10)}
inters[i,4]<-inters[i,3]+1+rpois(1,5)
}
inters<-as.data.frame(inters)
names(inters)<-c("VertexFrom","VertexTo","TimeStart","TimeStop")
allindivs <- c(union(inters$VertexFrom, inters$VertexTo))
g <- generatetonetwork(inters, allindivs)
path<-shortesthoppath(g, 2, 25, 10,217)
par(mfrow=c(1,1),mar=c(1,2,1,2))
plottonet(g,path=path,edge.width=3,vertex.color="gray20",vertex.size=2)
mtext(seq(1,10,1),at=seq(-1,1,length.out=n_indivs),line=-5,side=1,cex=1.5)
mtext(side=1,line=-3,"Individual ID",cex=1.75)
mtext(side=2,line=0,"Time",cex=1.75)
set.seed(1)
indivs<-seq(1,50,1)
n_indivs<-length(indivs)
clusters<-sample(c("A","B","C","D","E"),n_indivs,replace=TRUE)
inters<-matrix(NA,nr=400,nc=3)
for(i in 1:nrow(inters)){
inters[i,1]<-sample(indivs,1)
probs<-rep(0.025,n_indivs)
probs[clusters%in%clusters[inters[i,1]]]<-probs[clusters%in%clusters[inters[i,1]]]+0.9
probs[inters[i,1]]<-0
inters[i,2]<-sample(indivs,1,prob=probs)
inters[i,3]<-1+rpois(1,1)
}
network2<-graph_from_edgelist(inters[,1:2], directed = FALSE)
E(network2)$weight<-inters[,3]
network3<-simplify(network2, edge.attr.comb=list(weight="sum"))
V(network3)$id<-seq(1,n_indivs,1)
ego3<-make_ego_graph(network3,order=1,nodes='28')[[1]]
dists<-distances(network3,"28",weights=NA)
dists[dists>1]<-2
dists2<-dists[dists<2]
cols2<-rep("orange",length(dists2))
cols2[dists2==0]<-"red"
set.seed(2)
par(mfrow=c(1,2))
plot(network3,edge.width=E(network3)$weight^0.8,vertex.label=NA,vertex.size=10,vertex.color=ifelse(dists==0,"red",ifelse(dists==1,"orange","gray20")))
mtext("a)",side=3,adj=0.05,line=-5,cex=1.5)
plot(ego3,edge.width=E(ego3)$weight^0.8,vertex.label=NA,vertex.size=10,vertex.color=cols2)
mtext("b)",side=3,adj=0.05,line=-5,cex=1.5)
set.seed(1)
indivs<-seq(1,50,1)
n_indivs<-length(indivs)
clusters<-sample(c("A","B","C","D","E"),n_indivs,replace=TRUE)
inters<-matrix(NA,nr=400,nc=3)
for(i in 1:nrow(inters)){
inters[i,1]<-sample(indivs,1)
probs<-rep(0.025,n_indivs)
probs[clusters%in%clusters[inters[i,1]]]<-probs[clusters%in%clusters[inters[i,1]]]+0.9
probs[inters[i,1]]<-0
inters[i,2]<-sample(indivs,1,prob=probs)
inters[i,3]<-1+rpois(1,1)
}
network2<-graph_from_edgelist(inters[,1:2], directed = FALSE)
E(network2)$weight<-inters[,3]
network3<-simplify(network2, edge.attr.comb=list(weight="sum"))
V(network3)$id<-seq(1,n_indivs,1)
ego3<-make_ego_graph(network3,order=1,nodes='28')[[1]]
dists<-distances(network3,"28",weights=NA)
dists[dists>1]<-2
dists2<-dists[dists<2]
cols2<-rep("orange",length(dists2))
cols2[dists2==0]<-"red"
set.seed(2)
par(mfrow=c(1,2))
plot(network3,edge.width=E(network3)$weight^0.8,vertex.label=NA,vertex.size=10,vertex.color=ifelse(dists==0,"red",ifelse(dists==1,"orange","gray20")))
mtext("(a)",side=3,adj=0.05,line=-5,cex=1.5)
plot(ego3,edge.width=E(ego3)$weight^0.8,vertex.label=NA,vertex.size=10,vertex.color=cols2)
mtext("(b)",side=3,adj=0.05,line=-5,cex=1.5)
library(HyperG)
library(asnipe)
set.seed(18)
indivs<-seq(1,10,1)
n_indivs<-length(indivs)
inters<-matrix(NA,nr=8,nc=n_indivs)
inters[1,]<-c(1,1,0,0,0,0,0,0,0,0)
inters[2,]<-c(0,0,1,1,1,0,0,0,0,0)
inters[3,]<-c(0,0,0,0,0,1,1,1,1,1)
inters[4,]<-c(1,0,1,0,0,0,0,0,0,0)
inters[5,]<-c(0,1,0,1,0,0,0,0,0,0)
inters[6,]<-c(0,0,0,0,1,1,0,0,0,0)
inters[7,]<-c(0,0,0,0,0,0,1,1,0,0)
inters[8,]<-c(0,0,0,0,0,0,0,0,1,1)
bi_net<-graph_from_incidence_matrix(t(inters),directed=FALSE)
bi_net<-graph_from_incidence_matrix(t(inters),directed=FALSE)
par(mar=c(1,1,1,1),mfrow=c(1,3))
plot(bi_net,layout=layout.bipartite(bi_net),vertex.color=ifelse(V(bi_net)$type==TRUE,"gray80","gray20"),vertex.shape=ifelse(V(bi_net)$type==TRUE,"square","circle"),edge.color="gray40",vertex.label=NA)
mtext("(a)",side=3,line=-5,adj=0.05,cex=1.5)
###
hy_net<-hypergraph_from_incidence_matrix(inters)
set.seed(1)
plot(hy_net,vertex.label=NA,vertex.color="gray20",mark.col=adjustcolor("gray40",0.1),mark.border="gray40")
mtext("(b)",side=3,line=-5,adj=0.05,cex=1.5)
net_mat<-matrix(0,nr=n_indivs,nc=n_indivs)
for(i in 1:(ncol(net_mat)-1)){
for(j in (i+1):ncol(net_mat)){
net_mat[i,j]<-net_mat[j,i]<-sum(inters[inters[,i]>0,j])
}
}
so_net<-graph_from_adjacency_matrix(net_mat,mode="undirected",weighted=TRUE)
set.seed(9)
plot(so_net,edge.width=E(so_net)$weight^3,vertex.label=NA,vertex.color="gray20",edge.color="gray40")
mtext("(c)",side=3,line=-5,adj=0.05,cex=1.5)
library(igraph)
net<-erdos.renyi.game(n=10,p.or.m=0.2,directed=TRUE)
net
graph.adjacency(net,sparse=FALSE)
graph.adjacency(net)
as_adjacency_matrix(net)
knitr::opts_chunk$set(echo = TRUE)
full_adj<-readRDS("full_adj.RDS")
setwd("C:/Users/silk/Dropbox/MSCA_Fellowship/CEFE_Networks_Course/Session1")
full_adj<-readRDS("full_adj.RDS")
full_adj<-readRDS("full_adj.RDS")
full_adj
rbeta(length(full_adj),2,2)
hist(rbeta(length(full_adj),2,2))
hist(rbeta(length(full_adj),5,2))
hist(rbeta(length(full_adj),2,5))
hist(rbeta(length(full_adj),2,6))
hist(rbeta(length(full_adj),1,6))
hist(rbeta(length(full_adj),2,7))
#Create a weighted version
full_adj_weight<-full_adj*(rbeta(length(full_adj),2,7)
#Create a weighted version
full_adj_weight<-full_adj*rbeta(length(full_adj),2,7)
network<-graph_from_adjacency_matrix(full_adj.mode="undirected",weighted=TRUE)
network<-igraph::graph_from_adjacency_matrix(full_adj.mode="undirected",weighted=TRUE)
network<-igraph::graph_from_adjacency_matrix(full_adj_weight,mode="undirected",weighted=TRUE)
plot(network)
plot(network,vertex.label=NA,vertex.shape=ifelse(V(network)$sex=="M","square","circle"),vertex.color=cols[V(network)$group],edge.width=round(10*E(network)$weight),edge.color="bisque3")
library(igraph)
library(asnipe)
library(viridis)
library(sna)
library(tnet)
#Read in associated trait data
in_data<-readRDS("ind_data.RDS")
#Read in associated trait data
ind_data<-readRDS("ind_data.RDS")
ind_data
names(ind_data)[1]<-"id"
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
#Read in associated trait data
ind_data<-readRDS("ind_data.RDS")
names(ind_data)[1]<-"id"
#Create a weighted version - we are adding edge weights from a beta distribution
full_adj_weight<-full_adj*rbeta(length(full_adj),2,7)
#Create the network object
network<-igraph::graph_from_adjacency_matrix(full_adj_weight,mode="undirected",weighted=TRUE)
#Plot the network object
plot(network,vertex.label=NA,vertex.shape=ifelse(V(network)$sex=="M","square","circle"),vertex.color=cols[V(network)$group],edge.width=round(10*E(network)$weight),edge.color="bisque3")
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
#Read in associated trait data
ind_data<-readRDS("ind_data.RDS")
names(ind_data)[1]<-"id"
#Create a weighted version - we are adding edge weights from a beta distribution
full_adj_weight<-full_adj*rbeta(length(full_adj),2,7)
#Create the network object
network<-igraph::graph_from_adjacency_matrix(full_adj_weight,mode="undirected",weighted=TRUE)
#Plot the network object
cols<-viridis(10)
plot(network,vertex.label=NA,vertex.shape=ifelse(V(network)$sex=="M","square","circle"),vertex.color=cols[V(network)$group],edge.width=round(10*E(network)$weight),edge.color="bisque3")
#Read in the network object
full_adj<-readRDS("full_adj.RDS")
#Read in associated trait data
ind_data<-readRDS("ind_data.RDS")
names(ind_data)[1]<-"id"
#Create a weighted version - we are adding edge weights from a beta distribution
full_adj_weight<-full_adj*rbeta(length(full_adj),2,7)
#Create the network object
network<-igraph::graph_from_adjacency_matrix(full_adj_weight,mode="undirected",weighted=TRUE)
V(network)$size<-5+ind_data$offspring
V(network)$sex<-ind_data$sex
V(network)$group<-ind_data$group
#Plot the network object
cols<-viridis(10)
plot(network,vertex.label=NA,vertex.shape=ifelse(V(network)$sex=="M","square","circle"),vertex.color=cols[V(network)$group],edge.width=round(10*E(network)$weight),edge.color="bisque3")
size<-rnorm(40,0,1)
size2<-rnorm(40,0,1)
el_dom<-matrix(NA,nr=4000,nc=2)
sample(inds2,1,prob=size2)
#Create 40 individuals and give them each a size
inds2<-seq(1,40,1)
size2<-rnorm(40,0,1)
sample(inds2,1,prob=size2)
abs(min(size2))
sample(inds2,1,prob=size2+abs(min(size2)))
t_i1<-sample(inds2,1)
t_i2<-sample(inds2[-t_i1],1
)
t_i1
t_i2
inds2[-t_i1]
size_diff<-size2[t_i1]-size2[t_i2]
size_diff
t_i1<-sample(inds2,1,prob=0.1+size2+abs(min(size2)))
t_i1<-sample(inds2,1,prob=0.1+size2+abs(min(size2)))
t_i2<-sample(inds2[-t_i1],1)
size_diff<-size2[t_i1]-size2[t_i2]
size_diff
logit(size_diff)
library(boot)
boot::logit(size_diff)
boot::inv.logit(size_diff)
#Create 40 individuals and give them each a size
inds2<-seq(1,40,1)
size2<-rnorm(40,0,1)
#Create a directed edgelist for their interactions
el_dom<-matrix(NA,nr=4000,nc=2)
for(i in 1:nrow(el_dom)){
t_i1<-sample(inds2,1,prob=0.1+size2+abs(min(size2)))
t_i2<-sample(inds2[-t_i1],1)
size_diff<-size2[t_i1]-size2[t_i2]
winner<-rbinom(1,1,boot::inv.logit(size_diff))
if(winner==1){
el_dom[i,1]<-t_i1
el_dom[i,2]<-t_i2
}
if(winner==0){
el_dom[i,2]<-t_i1
el_dom[i,1]<-t_i2
}
}
dir_net<-graph_from_edgelist(el_dom,directed=TRUE)
plot(dir_net)
dir_net<-simplify(dir_net, edge.attr.comb=list(weight="sum"))
plot(dir_net)
#Create 40 individuals and give them each a size
inds2<-seq(1,40,1)
size2<-rnorm(40,0,1)
#Create a directed edgelist for their interactions
el_dom<-matrix(NA,nr=1000,nc=2)
for(i in 1:nrow(el_dom)){
t_i1<-sample(inds2,1,prob=0.1+size2+abs(min(size2)))
t_i2<-sample(inds2[-t_i1],1)
size_diff<-size2[t_i1]-size2[t_i2]
winner<-rbinom(1,1,boot::inv.logit(size_diff))
if(winner==1){
el_dom[i,1]<-t_i1
el_dom[i,2]<-t_i2
}
if(winner==0){
el_dom[i,2]<-t_i1
el_dom[i,1]<-t_i2
}
}
dir_net<-graph_from_edgelist(el_dom,directed=TRUE)
dir_net<-simplify(dir_net, edge.attr.comb=list(weight="sum"))
plot(dir_net)
edge_density(dir_net)
dir_mat<-as_adjacency_matrix(dir_net,sparse=FALSE)
dir_mat
?as_adjacency_matrix
dir_mat<-as_adjacency_matrix(dir_net,attr="weight",sparse=FALSE)
E(dir_net)
E(dir_net)$sum
E(dir_net)$weight
get.edge.attribute(dir_net)
get.edge.attribute(dir_net,"weight")
edge_attr(dir_net)
dir_net2<-simplify(dir_net, edge.attr.comb=list(weight="sum"))
edge_attr(dir_net2)
E(dir_net)$weight<-1
dir_net<-simplify(dir_net, edge.attr.comb=list(weight="sum"))
E(dir_net)$weight
E(dir_net)$weight<-1
dir_net<-simplify(dir_net, edge.attr.comb=list(weight="sum"))
E(dir_net)$weight<-1
dir_net<-simplify(dir_net, edge.attr.comb=list(weight="sum"))
E(dir_net)$weight
#Create a directed edgelist for their interactions
el_dom<-matrix(NA,nr=5000,nc=2)
for(i in 1:nrow(el_dom)){
t_i1<-sample(inds2,1,prob=0.1+size2+abs(min(size2)))
t_i2<-sample(inds2[-t_i1],1)
size_diff<-size2[t_i1]-size2[t_i2]
winner<-rbinom(1,1,boot::inv.logit(size_diff))
if(winner==1){
el_dom[i,1]<-t_i1
el_dom[i,2]<-t_i2
}
if(winner==0){
el_dom[i,2]<-t_i1
el_dom[i,1]<-t_i2
}
}
dir_net<-graph_from_edgelist(el_dom,directed=TRUE)
E(dir_net)$weight<-1
dir_net<-simplify(dir_net, edge.attr.comb=list(weight="sum"))
E(dir_net)
E(dir_net)$weight
edge_density(dir_net)
#Create 40 individuals and give them each a size
inds2<-seq(1,40,1)
size2<-rnorm(40,0,1)
#Create a directed edgelist for their interactions
el_dom<-matrix(NA,nr=2000,nc=2)
for(i in 1:nrow(el_dom)){
t_i1<-sample(inds2,1,prob=0.1+size2+abs(min(size2)))
t_i2<-sample(inds2[-t_i1],1)
size_diff<-size2[t_i1]-size2[t_i2]
winner<-rbinom(1,1,boot::inv.logit(size_diff))
if(winner==1){
el_dom[i,1]<-t_i1
el_dom[i,2]<-t_i2
}
if(winner==0){
el_dom[i,2]<-t_i1
el_dom[i,1]<-t_i2
}
}
dir_net<-graph_from_edgelist(el_dom,directed=TRUE)
E(dir_net)$weight<-1
dir_net<-simplify(dir_net, edge.attr.comb=list(weight="sum"))
E(dir_net)$weight
edge_density(dir_net)
dir_mat<-as_adjacency_matrix(dir_net,attr="weight",sparse=FALSE)
dir_mat
ind_data2<-data.frame(inds2,size2)
saveRDS(ind_data2,"ind_data2.RDS")
saveRDS(full_adj,"dir_mat.RDS")
saveRDS(ind_data,"dir_net.RDS")
getwd()
#Calculate degree using igraph
deg<-igraph::degree(network)
deg
#Calculate degree directly from the matrix
deg<-colSums(sign(full_adj))
#Calculate degree using igraph
deg<-igraph::degree(network)
#Calculate degree directly from the matrix
deg2<-colSums(sign(full_adj))
deg
deg2
?str
#Calculate strength using igraph
stre<-strength(network)
plot(stre~deg)
#We could then see, for example, how strength and degree are related to each other in our network
plot(stre~deg,pch=16,col=adjustcolor("black",0.5),las=1,xlab="Degree",ylab="Strength")
#We could then see, for example, how strength and degree are related to each other in our network
plot(stre~deg,pch=16,col=adjustcolor("black",0.5),las=1,xlab="Degree",ylab="Strength")
instre<-strength(dir_net,mode="out")
instre<-strength(dir_net,mode="in")
outstre<-strength(dir_net,mode="out")
#So we could ask if in-strength and out-strength are related to size in this network
par(mfrow=c(1,2))
plot(instre~ind_data2$size2,pch=16,col=adjustcolor("black",0.5),las=1,xlab="Size",ylab="In-strength")
plot(outstre~ind_data2$size2,pch=16,col=adjustcolor("black",0.5),las=1,xlab="Size",ylab="Out-strength")
evcent1<-igraph::eigen_centrality(network)
evcent1
#Calculate the eigenvector centrality of the directed network
evcent2<-igraph::eigen_centrality(dir_net,directed=TRUE)
#Calculate the eigenvector centrality of the directed network
evcent2<-igraph::eigen_centrality(dir_net,directed=TRUE)$vector
plot(evcent2~instre)
plot(evcent2~outstre)
?eigen_centrality
pr2<-igraph::page_rank(dir_net,directed=TRUE)$vector
plot(evcent2~pr2)
igraph::page_rank(dir_net,directed=TRUE)
#Compare the directed and undirected eigenvector centralities
cor.test(evcent2,evcent2a,method="spearman")
#Calculate the eigenvector centrality of the undirected representation of the network
evcent2a<-igraph::eigen_centrality(dir_net,directed=TRUE)$vector
#Compare the directed and undirected eigenvector centralities
cor.test(evcent2,evcent2a,method="spearman")
#Calculate the eigenvector centrality of the undirected representation of the network
evcent2a<-igraph::eigen_centrality(dir_net,directed=FALSE)$vector
#Compare the directed and undirected eigenvector centralities
cor.test(evcent2,evcent2a,method="spearman")
?eigen_centrality
#Calculate the eigenvector centrality of the unweighted version
evcent2b<-igraph::eigen_centrality(dir_net,directed=TRUE,weights=NA)$vector
evcent2b
cor.test(evcent2,evcent2b,method="spearman")
bet1<-igraph::betweenness(networks,weights=1/E(network)$weights)
bet1<-igraph::betweenness(network,weights=1/E(network)$weights)
close1<-igraph::closeness(network,weights=1/E(network)$weights)
bet2<-tnet::betweenness_w(network,weights=1/E(network)$weights)
tnet_network<-as.tnet(full_adj)
#Calculate global centrality measures
bet2<-tnet::betweenness_w(tnet_network)
close2<-tnet::closeness_w(tnet_network)
bet2<-igraph::betweenness(dir_net,directed=TRUE,weights=1/E(dir_net)$weights)
close2<-igraph::closeness(dir_net,directed=TRUE,weights=1/E(dir_net)$weights)
?igraph::closeness
close2<-igraph::closeness(dir_net,mode="in",weights=1/E(dir_net)$weights)
fb1<-sna::flowbet(full_adj_weight)
clust1<-igraph::transitivity(network,type="barrat")
clust1
#Plot clustering coefficient against betweenness
plot(clust1~bet1,pch=16,col=adjustcolor("black",0.5),las=1,xlab="Betweenness",ylab="Clustering Coefficient")
